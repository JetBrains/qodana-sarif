{
  "version": "3",
  "listProblem": [
    {
      "tool": "Qodana Intellij Linter",
      "category": "Probable bugs",
      "type": "Statement with empty body",
      "severity": "High",
      "comment": "if statement has empty body",
      "detailsInfo": "<html>\n<body>\nReports <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, and <code>switch</code> statements\nwith empty bodies.\n<p>While occasionally intended, such code is confusing and is often the result of a typo.</p>\n<!-- tooltip end -->\n<p>This inspection is disabled in JSP files.</p>\n</body>\n</html>",
      "sources": [
        {
          "type": "file",
          "path": "asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java",
          "language": "JAVA",
          "line": 216,
          "offset": 1,
          "length": 138,
          "code": {
            "startLine": 216,
            "length": 138,
            "offset": 51,
            "surroundingCode": "      throw new IllegalStateException();\n    }\n    if(true) {}\n    state = State.RETURN;\n    CheckSignatureAdapter checkSignatureAdapter ="
          }
        }
      ],
      "attributes": {
        "module": "root.asm-util.main",
        "inspectionName": "EmptyStatementBody",
        "isTechDebt": "true"
      },
      "hash": "c4406ef27470a515f616155fe7ffa92c3e6b7a3833a49323cb4fefd81d3d01ef"
    },
    {
      "tool": "Qodana Intellij Linter",
      "category": "Probable bugs",
      "type": "Constant conditions & exceptions",
      "severity": "High",
      "comment": "Condition is always true",
      "detailsInfo": "<html>\n<body>\nReports the code that always produces the same result, throws an exception, or potentially violates nullability contracts.\n<p>Examples:</p>\n<pre><code>if (array.length &lt; index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str == null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input == null ? null : input * input;\n}</code></pre>\n<p>\n  The inspection behavior may be controlled by a number of annotations, such as \n  <a href=\"https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html\">nullability</a> annotations,\n  <code><a href=\"https://www.jetbrains.com/help/idea/contract-annotations.html\">@Contract</a></code> annotation, \n  <code>@Range</code> annotation and so on.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Suggest @Nullable annotation for methods/fields/parameters where nullable values are used</b> option to warn when a\n    nullable value is passed as an argument to a method with a non-annotated parameter,\n    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating\n    the <code>@Nullable</code> annotation. You can also configure nullability annotations using the <b>Configure Annotations</b> button.</li>\n  <li>Use the <b>Treat non-annotated members and parameters as @Nullable</b> option to assume that non-annotated members can be null,\n    so they must not be used in non-null context.</li>\n  <li>Use the <b>Report not-null required parameter with null-literal argument usages</b> option to report method parameters that cannot be\n    null (e.g. immediately dereferenced in the method body), but there are call sites where a <code>null</code> literal is passed.</li>\n  <li>Use the <b>Report nullable methods that always return a non-null value</b> option to report methods that are annotated as\n  <code>@Nullable</code>, but always return non-null value. In this case, it's suggested that you change the annotation to <code>@NotNull</code>.</li>\n  <li>Use the <b>Don't report assertions with condition statically proven to be always true</b> option to avoid reporting assertions that were\n    statically proven to be always true. This also includes conditions like <code>if (alwaysFalseCondition) throw new IllegalArgumentException();</code>.</li>\n  <li>Use the <b>Ignore assert statements</b> option to control how the inspection treats <code>assert</code> statements. By default, the option\n    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored\n    (-da mode).</li>\n  <li>Use the <b>Warn when reading a value guaranteed to be constant</b> option to add warnings on reading variables that contain some constant values,\n    for example: <code>true</code>, <code>false</code>, or <code>null</code>.</li>\n  <li>Use the <b>Report problems that happen only on some code paths</b> option to control whether to report problems that may happen only\n    on some code path. If this option is disabled, warnings like <i>exception is possible</i> will not be reported. The inspection will report\n    only warnings like <i>exception will definitely occur</i>. This mode may greatly reduce the number of false-positives, especially if the code\n    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most\n    important problems in legacy code bases.\n  </li>\n</ul>\n\n</body>\n</html>\n",
      "sources": [
        {
          "type": "file",
          "path": "asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java",
          "language": "JAVA",
          "line": 216,
          "offset": 1,
          "length": 138,
          "code": {
            "startLine": 216,
            "length": 138,
            "offset": 54,
            "surroundingCode": "      throw new IllegalStateException();\n    }\n    if(true) {}\n    state = State.RETURN;\n    CheckSignatureAdapter checkSignatureAdapter ="
          }
        }
      ],
      "attributes": {
        "module": "root.asm-util.main",
        "inspectionName": "ConstantConditions"
      },
      "hash": "21fc525599339e758326644928cf5219f9f68409b18708d1b16ccf04511f53d5"
    },
    {
      "tool": "Qodana Intellij Linter",
      "category": "Probable bugs",
      "type": "Infinite recursion",
      "severity": "High",
      "comment": "Method visitTypeVariable() recurses infinitely, and can only end by throwing an exception",
      "detailsInfo": "<html>\n<body>\nReports methods that call themselves infinitely unless an exception is thrown.\n<p>\n  Methods reported by this inspection cannot return normally.\n  While such behavior may be intended, in many cases this is just an oversight.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  int baz() {\n      return baz();\n  }</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>",
      "sources": [
        {
          "type": "file",
          "path": "asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java",
          "language": "JAVA",
          "line": 257,
          "offset": 1,
          "length": 152,
          "code": {
            "startLine": 257,
            "length": 152,
            "offset": 27,
            "surroundingCode": "\n  @Override\n  public void visitTypeVariable(final String name) {\n    visitTypeVariable(name);\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {"
          }
        }
      ],
      "attributes": {
        "module": "root.asm-util.main",
        "inspectionName": "InfiniteRecursion"
      },
      "hash": "ac5714b0b15b7e8c4311899afd1c2b44069865039f2a9d309dcab04eddd4681d"
    },
    {
      "tool": "Qodana Intellij Linter",
      "category": "Probable bugs",
      "type": "Infinite recursion",
      "severity": "High",
      "comment": "Method visitTypeVariable() recurses infinitely, and can only end by throwing an exception",
      "detailsInfo": "<html>\n<body>\nReports methods that call themselves infinitely unless an exception is thrown.\n<p>\n  Methods reported by this inspection cannot return normally.\n  While such behavior may be intended, in many cases this is just an oversight.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  int baz() {\n      return baz();\n  }</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>",
      "sources": [
        {
          "type": "file",
          "path": "asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java",
          "language": "JAVA",
          "line": 258,
          "offset": 1,
          "length": 152,
          "code": {
            "startLine": 258,
            "length": 152,
            "offset": 27,
            "surroundingCode": "\n  @Override\n  public void visitTypeVariable(final String name) {\n    visitTypeVariable(name);\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {"
          }
        }
      ],
      "attributes": {
        "module": "root.asm-util.main",
        "inspectionName": "InfiniteRecursion",
        "isTechDebt": "true"
      },
      "hash": "ad5714b0b15b7e8c4311891afd1c2b44069865039f2a9d309dcab04eddd4681d"
    }
  ]
}